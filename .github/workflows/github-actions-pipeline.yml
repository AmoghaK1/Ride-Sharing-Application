name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # âœ… Create the SSH key inside /tmp (accessible to docker actions)
      - name: Setup SSH key (raw or base64)
        env:
          RAW_KEY: ${{ secrets.EC2_SSH_KEY }}
          B64_KEY: ${{ secrets.EC2_SSH_KEY_B64 }}
        run: |
          set -e
          if [ -n "$B64_KEY" ]; then
            echo "Writing SSH key from base64 secret"
            echo "$B64_KEY" | base64 -d > /tmp/private_key.pem
          elif [ -n "$RAW_KEY" ]; then
            echo "Writing SSH key from raw secret"
            # Preserve exact newlines and avoid echo quirks
            printf "%s" "$RAW_KEY" > /tmp/private_key.pem
          else
            echo "No SSH key secret provided (EC2_SSH_KEY or EC2_SSH_KEY_B64)" >&2
            exit 1
          fi
          chmod 600 /tmp/private_key.pem

      - name: Verify SSH key presence
        run: |
          set -e
          ls -l /tmp/private_key.pem
          wc -c /tmp/private_key.pem

      # âœ… Upload project files to EC2
      - name: Upload project files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: /tmp/private_key.pem
          source: |
            ./backend/**
            ./frontend/**
            ./docker-compose.yml
          target: /home/${{ secrets.EC2_USER }}/ride-sharing-application

      # âœ… SSH into EC2 and deploy
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key_path: /tmp/private_key.pem
          script_stop: true
          script: |
            set -e
            cd /home/${{ secrets.EC2_USER }}/ride-sharing-application

            echo "ðŸ“¦ Creating .env file..."
            cat > .env << 'EOF'
            MONGODB_URL=${{ secrets.MONGODB_URL }}
            DATABASE_NAME=${{ secrets.DATABASE_NAME }}
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            PORT=${{ secrets.PORT }}
            EOF

            echo "ðŸ§¹ Cleaning up old containers..."
            docker compose down || docker-compose down || true

            echo "ðŸ”§ Building and starting containers..."
            if docker compose version >/dev/null 2>&1; then
              docker compose up -d --build
            else
              docker-compose up -d --build
            fi

            echo "ðŸ§½ Pruning unused images..."
            docker image prune -f || true

            echo "âœ… Deployment complete!"
