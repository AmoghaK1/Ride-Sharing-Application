name: CD - Deploy on Self-Hosted (Docker)

on:
  workflow_run:
    workflows: ["CI - Build and Push Docker Images"]
    types: [completed]
  workflow_dispatch:

concurrency:
  group: cd-deploy-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') }}
    runs-on: self-hosted
    timeout-minutes: 30
    steps:
      - name: Prepare env vars
        shell: bash
        run: |
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_ENV
          ns="${{ secrets.DOCKERHUB_NAMESPACE }}"
          if [ -z "$ns" ]; then ns="${{ secrets.DOCKERHUB_USERNAME }}"; fi
          echo "DOCKERHUB_NAMESPACE=$ns" >> $GITHUB_ENV
          echo "FRONTEND_IMAGE=$ns/ride-sharing-frontend" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=$ns/ride-sharing-backend" >> $GITHUB_ENV
          # Path to .env file on the server for backend container
          # Set this in repo/environment secrets. Example: /home/ec2-user/ride/.env
          echo "ENV_FILE_PATH=${{ secrets.ENV_FILE_PATH }}" >> $GITHUB_ENV

      - name: Ensure Docker engine is installed and running
        shell: bash
        run: |
          set -euo pipefail
          if command -v docker >/dev/null 2>&1; then
            echo "Docker CLI found: $(docker --version)"
          else
            echo "Docker not found. Installing..."
            if [ -f /etc/os-release ]; then . /etc/os-release; else ID=""; fi
            case "$ID" in
              amzn)
                # Amazon Linux 2/2023
                if command -v dnf >/dev/null 2>&1; then sudo dnf -y install docker curl; else sudo yum -y install docker curl; fi
                ;;
              ubuntu)
                sudo apt-get update -y
                sudo apt-get install -y docker.io curl
                ;;
              debian)
                sudo apt-get update -y
                sudo apt-get install -y docker.io curl
                ;;
              rhel|centos|rocky|almalinux)
                sudo yum -y install docker curl
                ;;
              *)
                echo "Unknown distro ($ID). Attempting generic install via package manager...";
                if command -v dnf >/dev/null 2>&1; then sudo dnf -y install docker curl || true; fi
                if command -v yum >/dev/null 2>&1; then sudo yum -y install docker curl || true; fi
                if command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y docker.io curl || true; fi
                ;;
            esac
          fi
          # Ensure service is running
          if command -v systemctl >/dev/null 2>&1; then
            sudo systemctl enable docker || true
            sudo systemctl start docker || true
          fi
          sudo docker info >/dev/null 2>&1 || { echo "Docker daemon not responding" >&2; exit 1; }

      - name: Show target images (sanity)
        run: |
          echo "Pulling namespace: $DOCKERHUB_NAMESPACE"
          echo "Backend tag: $BACKEND_IMAGE:latest"
          echo "Frontend tag: $FRONTEND_IMAGE:latest"

      - name: Log in to Docker Hub (sudo)
        shell: bash
        run: |
          set -euo pipefail
          echo "$DOCKERHUB_TOKEN" | sudo docker login docker.io -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Pull latest images
        shell: bash
        run: |
          set -euo pipefail
          sudo docker pull "$FRONTEND_IMAGE:latest"
          sudo docker pull "$BACKEND_IMAGE:latest"

      - name: Stop and remove old containers (if any)
        shell: bash
        run: |
          set -euo pipefail
          for name in ride-frontend ride-backend; do
            if [ "$(sudo docker ps -aq -f name=^${name}$)" ]; then
              echo "Stopping and removing $name"
              sudo docker rm -f "$name" || true
            else
              echo "No existing container named $name"
            fi
          done

      - name: Run backend container
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${ENV_FILE_PATH:-}" ]; then
            echo "ENV_FILE_PATH is not set. Please configure 'ENV_FILE_PATH' secret to point to your backend .env file on the server." >&2
            exit 1
          fi
          sudo docker run -d \
            --name ride-backend \
            --restart unless-stopped \
            --env-file "$ENV_FILE_PATH" \
            -p 8000:8000 \
            "$BACKEND_IMAGE:latest"

      - name: Run frontend container
        shell: bash
        run: |
          set -euo pipefail
          sudo docker run -d \
            --name ride-frontend \
            --restart unless-stopped \
            -p 80:80 \
            "$FRONTEND_IMAGE:latest"

      - name: Show running containers
        run: sudo docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'

      - name: Health checks
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking frontend on localhost:80"
          curl -I --max-time 5 http://localhost/ || true
          echo "Checking backend docs on localhost:8000/docs"
          curl -I --max-time 5 http://localhost:8000/docs || true
